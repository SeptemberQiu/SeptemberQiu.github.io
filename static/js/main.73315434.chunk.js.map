{"version":3,"sources":["reportWebVitals.js","Time.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Time","useState","intervalTime","setIntervalTime","nowTime","setNowTime","useEffect","setInterval","now","date1","dayjs","confirmDay","diff","confirmWeek","confirmYear","toFixed","meetDay","IntervalTime","result","format","style","margin","border","width","textAlign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,8BCwDCQ,EA5DF,WAGX,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8BF,qBAA9B,mBAAOG,EAAP,KAAgBC,EAAhB,KAuCA,OAVAC,qBAAU,WACRC,aAAY,YAtBO,SAACC,GAKpB,IAAMC,EAAQC,IAAMF,GAChBG,EAAaF,EAAMG,KAAK,aAAc,OACtCC,EAAcJ,EAAMG,KAAK,aAAc,QACvCE,EAAeL,EAAMG,KAAK,aAAc,QAAQ,GAAOG,QAAQ,GAE/DC,EAAUP,EAAMG,KAAK,aAAc,OAGvCT,EAAgB,CACdQ,aACAE,cACAC,cACAE,YAOAC,CADUP,OAEV,IAAIQ,EA7BOR,MAAQS,OAAO,uBA8B1Bd,EAAWa,KAEV,OACF,IAGD,mCACE,sBAAKE,MAAO,CAAEC,OAAQ,SAAUC,OAAQ,kBAAmBC,MAAO,MAAOC,UAAW,UAApF,UACE,2DACA,4BAAIpB,IACJ,uEACA,8BAAIF,EAAac,QAAjB,YACA,uEACA,8BAAId,EAAaS,WAAjB,YACA,8BAAIT,EAAaW,YAAjB,YACA,8BAAIX,EAAaY,YAAjB,kBClDRW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BtC,M","file":"static/js/main.73315434.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\n\nconst Time = () => {\n\n\n  const [intervalTime, setIntervalTime] = useState({});\n  const [nowTime, setNowTime] = useState();\n\n  // 当前时间\n  const nowTimeFun = () => {\n    let result = dayjs().format('YYYY-MM-DD HH:mm:ss');\n    return result;\n  }\n\n  const IntervalTime = (now) => {\n    // const date1 = dayjs('2021-01-25')\n    // const date2 = dayjs('2018-07-02')\n    // date1.diff(date2)    \n\n    const date1 = dayjs(now);\n    let confirmDay = date1.diff('2020-11-22', 'day');\n    let confirmWeek = date1.diff('2020-11-22', 'week');\n    let confirmYear = (date1.diff('2020-11-22', 'year', true)).toFixed(1);\n\n    let meetDay = date1.diff('2020-11-07', 'day');\n\n\n    setIntervalTime({\n      confirmDay,\n      confirmWeek,\n      confirmYear,\n      meetDay\n    });\n  }\n\n  useEffect(() => {\n    setInterval(() => {\n      let now = dayjs()\n      IntervalTime(now);\n      let result = nowTimeFun();\n      setNowTime(result);\n\n    }, 1000);\n  }, [])\n\n  return (\n    <>\n      <div style={{ margin: '0 auto', border: '1px solid black', width: '20%', textAlign: 'center' }}>\n        <h3>当前时间:</h3>\n        <p>{nowTime}</p>\n        <h3>距首次见面已:</h3>\n        <p>{intervalTime.meetDay}天</p>\n        <h3>距正式确认已:</h3>\n        <p>{intervalTime.confirmDay}天</p>\n        <p>{intervalTime.confirmWeek}周</p>\n        <p>{intervalTime.confirmYear}年</p>\n      </div>\n\n    </>\n  )\n}\n\nexport default Time;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Time from './Time'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Time />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}